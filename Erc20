// SPDX-License-Identifier: MIT
pragma solidity >=0.4.25 <0.9.0;
// Interface for ERC20 Token
interface ERC20Interface {
function totalSupply() external view returns (uint);
function balanceOf(address account) external view returns (uint balance);
function allowance(address owner, address spender) external view returns (uint remaining);
function transfer(address recipient, uint amount) external returns (bool success);
function approve(address spender, uint amount) external returns (bool success);
function transferFrom(address sender, address recipient, uint amount) external returns (bool
success);
event Transfer(address indexed from, address indexed to, uint value);
event Approval(address indexed owner, address indexed spender, uint value);
}
// ERC20 Token contract
contract PRToken is ERC20Interface {
string public symbol; // Token symbol
string public name; // Token name
uint8 public decimals; // Number of decimal places
address payable public yourWalletAddress; // Your wallet address
uint public totalSupply; // Total token supply
mapping(address => uint) balances; // Mapping to store balances of token holders
mapping(address => mapping(address => uint)) allowed; // Mapping to store allowances
// Constructor to initialize token details
constructor() {
symbol = "MyD"; // Token symbol
name = "My Decentralized Token"; // Token name
decimals = 18; // Number of decimal places
totalSupply = 1_000_000_000_000_000_000_000_000; // Total token supply
yourWalletAddress = payable(msg.sender); // Your wallet address
balances[yourWalletAddress] = totalSupply; // Assign total supply to your wallet address
emit Transfer(address(0), yourWalletAddress, totalSupply); // Emit transfer event
}
// Function to get the total token supply
function totalSupply() public view override returns (uint) {
return totalSupply;
}
// Function to get the balance of an account
function balanceOf(address account) public view override returns (uint balance) {
return balances[account];
}
// Function to transfer tokens to a recipient
function transfer(address recipient, uint amount) public override returns (bool success) {
require(recipient != address(0), "Invalid recipient address"); // Require valid recipient address
require(amount <= balances[msg.sender], "Insufficient balance"); // Require sufficient balance
balances[msg.sender] -= amount; // Deduct tokens from sender's balance
balances[recipient] += amount; // Add tokens to recipient's balance
emit Transfer(msg.sender, recipient, amount); // Emit transfer event
return true;
}
// Function to approve a spender to spend tokens on behalf of the owner
function approve(address spender, uint amount) public override returns (bool success) {
allowed[msg.sender][spender] = amount; // Set allowance
emit Approval(msg.sender, spender, amount); // Emit approval event
return true;
}
// Function to transfer tokens from one account to another
function transferFrom(address sender, address recipient, uint amount) public override returns (bool
success) {
require(sender != address(0), "Invalid sender address"); // Require valid sender address
require(recipient != address(0), "Invalid recipient address"); // Require valid recipient address
require(amount <= balances[sender], "Insufficient balance"); // Require sufficient balance
require(amount <= allowed[sender][msg.sender], "Allowance exceeded"); // Require sufficient
allowance
balances[sender] -= amount; // Deduct tokens from sender's balance
allowed[sender][msg.sender] -= amount; // Deduct tokens from sender's allowance
balances[recipient] += amount; // Add tokens to recipient's balance
emit Transfer(sender, recipient, amount); // Emit transfer event
return true;
}
// Function to get the remaining allowance of a spender for an owner
function allowance(address owner, address spender) public view override returns (uint remaining) {
return allowed[owner][spender]; // Return remaining allowance
}
}
